/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export function col(name: string): Expr
export class DataFrame {
  /** Filter a DataFrame to only include rows that match the specified filter expression. */
  filter(expr: Expr): this
  /** Perform an aggregate query with optional grouping expressions. */
  aggregate(groupExpr: Array<Expr>, aggrExpr: Array<Expr>): this
  /**
   * Limit the number of rows returned from this DataFrame.
   *
   * `skip` - Number of rows to skip before fetch any row
   *
   * `fetch` - Maximum number of rows to fetch, after skipping `skip` rows.
   * ```
   * import { SessionContext } from '@napi-rs/datafusion';
   * const ctx = SessionContext::new();
   * const df = await ctx.readCsv("tests/data/example.csv");
   * const df = df.limit(0, Some(100));
   * ```
   */
  limit(skip: number, fetch?: number | undefined | null): this
  /**
   * Print results.
   *
   * ```
   * import { SessionContext } from '@napi-rs/datafusion'
   *
   * const ctx = new SessionContext();
   * const df = await ctx.readCsv('tests/data/example.csv');
   * await df.show();
   * ```
   */
  show(): Promise<void>
}
export class Expr {
  /** Create a literal expression */
  static lit(value: string): Expr
  /** Return `self AS name` alias expression */
  alias(name: string): this
  /** Return `self <= other` */
  ltEq(other: Expr): this
}
export class SessionContext {
  constructor()
  readCsv(path: string): Promise<DataFrame>
}
